/*
   Двойные электронные игральные кости на ATMEGA8A-PU

  При нажатии на кнопку "Reset" МК выходит из глубокого сна (Power-Down) по средствам прерывания,
  генерирует случайное независимое рандомное число для обоих кубиков и выводит значения на панели.
  Через 20 секунд бездействия МК уходит в глубокий сон.

  Во время бездействия можно выбрать одну из трёх настроек нажатием кнопки Setting:

  - Откл./Вкл. звука по X1 нажатию кнопки с сохранением флага в EEPROM;
  - Откл./Вкл. синего кубика по X2 нажатию кнопки с сохранением флага в EEPROM;
  - Проверка заряда аккумулятора по X3 нажатию кнопки, один горящей LED равен 0,1V: {14 горящих LED = 4,2V(100%), 1 горящий LED = 2,9V (7%)}.

  Потребление всей схемы при горящих 12 светодиодах:
  - При 4,2V: 73 мА
  Потребление всей схемы в режиме глубокого сна:
  - При 4,2V: 16 мкА

   Автор: Otto
   Версия: 1.3
   Дата: 12.04.2022г.
*/

#include <avr/interrupt.h>  // Заголовочный файл для обработки прерываний
#include <avr/sleep.h>      // Заголовочный файл с описанием режимов сна

#include <EEPROM.h>         // Библиотека для работы с EEPROM (использую для сохаренения состояния флагов BLUE LED панели и звука бузера)
#include <EncButton.h>      // Библиотека для работы с кнопками (использую для 1_2_3 кликов "set_But")
#include <Random16.h>       // Библиотека для быстрой генерации 16 бит случайных чисел

//Красные светодиоды (Панель 1)
#define RED_centerLED 10    // Центральный LED7 подключён к PB2 pin(10)
#define RED_LED1_6 4        // LED1 и LED6 подключён к PD4 pin(4)
#define RED_LED2_5 1        // LED2 и LED5 подключён к PD1 pin(1)
#define RED_LED3_4 0        // LED3 и LED4 подключён к PD0 pin(0)

//Синие светодиоды (Панель 2)
#define BLUE_centerLED 8    // Центральный LED14 подключён к PB0 pin(8)
#define BLUE_LED8_13 7      // LED8 и LED13 подключён к PD7 pin(7)
#define BLUE_LED9_12 6      // LED9 и LED12 подключён к PD6 pin(6)
#define BLUE_LED10_11 5     // LED10 и LED11 подключён к PD5 pin(5)

//Бузер, кнопки и настройки таймера сна с ячейками памяти в EEPROM
#define buzz 9              // Buzzer подключён к PB1 pin(9)
#define res_But 2           // Кнопка Reset на PD2 pin(2)
#define set_But 3           // Кнопка Setting на PD3 pin(3)

#define TIME_BEFORE_SLEEP 20000   // Время до ухода в сон через 20 секунд
#define TIME_BTN_BOUNCE   20      // Время до устранения антидребезга (20 миллисекунд)

//Подбор и сравнение значения опорного нарпяжения МК ниже осуществляем с помощью точного мультиметра и сравнения результата с полученными данными в Serial)
#define REFERENCE_VOLTAGE 1.259   // Тут нужно подобрать значение опорного напряжения под конкретный МК (из-за погрешности)

#define addrBuz  10         // Адрес в памяти EEPROM для сохр./чтения состояния "addrBuz" (Вкл./Откл. Бузера)
#define addrBlue 20         // Адрес в памяти EEPROM для сохр./чтения состояния "addrBlue" (Вкл./Откл. Панель 2 - BLUE)

EncButton <EB_TICK, set_But> ButtSet;   // Создаём объект "ButtSet" класса "EncButton", "set_But" - кнопка.
Random16 rnd_Red;                       // Создаём объект генератора для красного кубика
Random16 rnd_Blue;                      // Создаём объект генератора для синего кубика

//Глобальные переменные
const byte pinTWO [] = {RED_centerLED, RED_LED1_6, RED_LED2_5, RED_LED3_4, BLUE_centerLED, BLUE_LED8_13, BLUE_LED9_12, BLUE_LED10_11};    // Массивы пинов для Анимации RED и BLUE панелей
const byte pinONE [] = {RED_centerLED, RED_LED1_6, RED_LED2_5, RED_LED3_4};   // Массивы пинов для Анимации RED панели

unsigned long timer = 0;       // Таймер для отсчёта времени ожидания действия перед уходом в сон
unsigned long BtnTimer = 0;    // Таймер для антидребезга кнопки Reset. (Для кнопки Setting антидребезг уже встроен в бибилотеку "EncButton.h", поэтому используем только для Reset)
bool buttonPrev = false;       // Флаг, для взаимодействия с кнопкой Reset "res_But"

//Флаги для сохранения значений в EEPROM (для кнопки Setting)
bool BuzzToggle = false;       // Если "true", то отключаем звук бузера
bool BlueToggle = false;       // Если "true", то отключаем Панель 2 (BLUE)
bool ResetPusk = false;        // Если "false", то сразу бросаем кубик(и), нужен для автоброска после выхода из сна.
